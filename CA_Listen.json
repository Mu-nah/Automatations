{
  "name": "CA_Listen",
  "nodes": [
    {
      "parameters": {
        "jsCode": "// Combine all transactions from HTTP input\nconst transactions = items.flatMap(item => Array.isArray(item.json) ? item.json : [item.json]);\n\nconst wallet = \"gCVJbLPfJ37M2R2aNca2Y8JSYRXAfhdQFinQxDr2wro\";\n\nlet latestBuy = null;\nlet latestTimestamp = 0;\n\n// Loop through each transaction and find the latest token received by the wallet\nfor (const tx of transactions) {\n  if (!Array.isArray(tx.tokenTransfers)) continue;\n\n  for (const transfer of tx.tokenTransfers) {\n    const isBuy =\n      transfer.toUserAccount === wallet &&\n      transfer.fromUserAccount !== wallet &&\n      transfer.mint;\n\n    if (isBuy && tx.timestamp > latestTimestamp) {\n      latestBuy = {\n        tokenContractAddress: transfer.mint,\n        direction: \"buy\",\n        timestampRaw: tx.timestamp\n      };\n      latestTimestamp = tx.timestamp;\n    }\n  }\n}\n\n// If no buy trades found, return a flat Discord-ready message\nif (!latestBuy) {\n  return {\n    content: \"‚ö†Ô∏è No buy trades found for the wallet.\"\n  };\n}\n\n// Convert timestamp to WAT (UTC+1)\nconst timestampUTC = new Date(latestBuy.timestampRaw * 1000);\nconst timestampWAT = new Date(timestampUTC.getTime() + (1 * 60 * 60 * 1000));\n\n// Return plain + formatted message for Discord\nreturn {\n  content: `üì• **New Buy Detected**\n**Contract Address:** ${latestBuy.tokenContractAddress}\n**Direction:** ${latestBuy.direction.toUpperCase()}\n**Time (WAT):** ${timestampWAT.toISOString()}`\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        140,
        -200
      ],
      "id": "1d11df81-9d75-4a0e-be74-672965c6dcf9",
      "name": "Code"
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "1346284477692907570",
          "mode": "list",
          "cachedResultName": "XAgent",
          "cachedResultUrl": "https://discord.com/channels/1346284477692907570"
        },
        "channelId": {
          "__rl": true,
          "value": "1360696019465146494",
          "mode": "list",
          "cachedResultName": "n8n_listen",
          "cachedResultUrl": "https://discord.com/channels/1346284477692907570/1360696019465146494"
        },
        "content": "={{ $json.content }}",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        580,
        -100
      ],
      "id": "2fc03eff-9c06-4661-b788-c6ae1d150d15",
      "name": "Discord",
      "webhookId": "e0e2178c-a7d4-4f9e-a243-9870997c0e67",
      "credentials": {
        "discordBotApi": {
          "id": "NKKMgALxrR178Vvm",
          "name": "Xai"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6d317429-b723-4e6a-9557-7d65a62f5e91",
              "leftValue": "={{ $json.content }}",
              "rightValue": "No buy trades found for the wallet",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "da64ed72-3e2b-4c08-893c-b347ebffe2a8",
              "leftValue": "={{ $json.content }}",
              "rightValue": "So11111111111111111111111111111111111111112",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "f868cd34-4a71-4bbc-8457-773cc0e059ed",
              "leftValue": "={{ $json.content }}",
              "rightValue": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "f1e859fd-01d9-4110-a31c-7bca466084e5",
              "leftValue": "={{ $json.content }}",
              "rightValue": "Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        360,
        -200
      ],
      "id": "f05119e4-3795-40fb-ab43-d8d6c55de799",
      "name": "If"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        580,
        -300
      ],
      "id": "100d4f09-6c2b-4b4f-ba92-b99e0578bf7c",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "url": "https://api.helius.xyz/v0/addresses/gCVJbLPfJ37M2R2aNca2Y8JSYRXAfhdQFinQxDr2wro/transactions",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "api-key",
              "value": "37fff714-e70e-487e-bfe5-bd8080183e4f"
            },
            {
              "name": "limit",
              "value": "4"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -300,
        -200
      ],
      "id": "cf9712c2-db10-4371-9c97-ade310f56173",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "operation": "removeItemsSeenInPreviousExecutions",
        "dedupeValue": "={{ $json.signature }}",
        "options": {}
      },
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 2,
      "position": [
        -80,
        -200
      ],
      "id": "5d7ca06e-9054-4933-8093-4118d1daabdc",
      "name": "Remove Duplicates"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "seconds"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -520,
        -200
      ],
      "id": "44a8d109-fb2e-494a-8dbc-4f094333d8b1",
      "name": "Schedule Trigger"
    }
  ],
  "pinData": {},
  "connections": {
    "Code": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Discord",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Remove Duplicates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Duplicates": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "25858b7e-5f10-4eab-ad25-819d4e0b482c",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "bd3fb2445c8d5240ef1fe92cf193d7e05c0fe42313f2bfa7af5644dbeaa225be"
  },
  "id": "p8PQb4oxtN5q3PnZ",
  "tags": []
}