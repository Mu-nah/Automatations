{
  "name": "dexSignal",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 1
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -2288,
        1460
      ],
      "id": "abe8b157-6e19-4e9e-9f1f-24c33f3284b5",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "url": "https://api.twitter.com/2/lists/1917654305844470009/tweets",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "=max_results",
              "value": "=5"
            },
            {
              "name": "=tweet.fields",
              "value": "=created_at,author_id,text"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer AAAAAAAAAAAAAAAAAAAAABT%2B0AEAAAAAYuxSxdg7VzfBcoX7USgjlkZAoh8%3Du0PhYgzdeABdIIv3mrBbBXPCAZrQQ62nMrtatLN12JHbyovr5L"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2000,
        1460
      ],
      "id": "b28adced-91b1-4c4b-b354-65529cb52f66",
      "name": "tweets",
      "retryOnFail": true
    },
    {
      "parameters": {
        "jsCode": "return items[0].json.data.map(item => {\n  return { json: item };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1712,
        1460
      ],
      "id": "b7a0320e-6d53-4042-88f7-ee6b30009080",
      "name": "Code1",
      "retryOnFail": true
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1488,
        1608
      ],
      "id": "b361109a-1d02-4cb8-a56c-512a89db90e7",
      "name": "Loop Over Items",
      "retryOnFail": true
    },
    {
      "parameters": {
        "operation": "removeItemsSeenInPreviousExecutions",
        "dedupeValue": "={{ $json.id }} {{ $json.tweet }}",
        "options": {
          "historySize": "={{ 1e+50 }}"
        }
      },
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 2,
      "position": [
        -1264,
        1608
      ],
      "id": "30e04709-81ec-42ec-b8ff-e738c2aca0c5",
      "name": "Remove Duplicates1",
      "retryOnFail": true
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 9,
              "triggerAtMinute": 30
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -2288,
        1756
      ],
      "id": "9a05c2ac-1850-4bfa-a851-a0ad9cba5d5d",
      "name": "Schedule Trigger2",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const input = items[0].json.text;\n\nconst matches = input.match(/\\[(.*?) Tweet\\]\\n(.*?)(?=\\n\\[|$)/gs);\n\nconst output = matches.map(block => {\n  const [_, label, text] = block.match(/\\[(.*?) Tweet\\]\\n([\\s\\S]*)/);\n  return {\n    json: {\n      strategy: label.trim(),\n      tweet: text.trim()\n    }\n  };\n});\n\nreturn output;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1712,
        1756
      ],
      "id": "e2536148-6ba6-4d64-a29c-b4a93bc2dc17",
      "name": "Code2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a simulation engine for testing crypto alert strategies. Generate One realistic tweet for each of the six strategies below. Use natural language, realism, and formatting that mirrors real crypto Twitter behavior.\n\nüîî 1. Watcher.Guru Strategy  \nGenerate a tweet that mentions or strongly implies $500 billion or more in capital, liquidity, or investment entering or leaving a financial market in real time. The tweet **starts with \"JUST IN:\"** and **ends with \"[TEST]\"**.\n\nüîç 2. Dave Portnoy Strategy  \nGenerate a tweet from Dave Portnoy that includes at least **one valid on-chain contract address**, using one of these formats:  \n- EVM: starts with `0x`, 42 characters  \n- Solana/TON: 32‚Äì64 characters, alphanumeric, may end in `pump`, `coin`, etc.  \nEnd the tweet with **\"[TEST]\"**.\n\nüöÄ 3. Crashius Clay Strategy  \nGenerate a tweet that announces a **confirmed, live token launch** using phrases like:  \n‚Äújust launched‚Äù, ‚Äúnow live‚Äù, ‚Äúchart is out‚Äù, ‚Äúbuy now it‚Äôs live‚Äù  \nMust include a token name (e.g., `$MOON`) and ends with **\"[TEST]\"**.\n\nüá∫üá∏ 4. Trump X Strategy  \nGenerate a tweet from Donald Trump‚Äôs X account that:  \n- Explicitly mentions at least one crypto token (e.g., BTC, ETH, XRP, TRUMP)  \n- Includes a bullish or bearish market commentary or projection  \n- Ends with **\"[TEST]\"**\n\nüì∞ 5. Crypto News Impact Strategy  \nGenerate a realistic crypto tweet that reports a **confirmed hack, exploit, or vulnerability** affecting a specific token, smart contract, DeFi protocol, or bridge.  \n- Describe a clear, specific security incident  \n- Mention the **exploit type**, **amount lost**, or **component affected** (bridge, vault, lending pool, etc.)  \n- Use real-sounding project names (e.g., Cetus, Aerodrome, Matrix, Optimism)  \n- Ends with **\"[TEST]\"**\n\nüõ° 6. PeckShield Strategy  \nGenerate a tweet that looks like a **PeckShield Alert** about a confirmed exploit or suspicious transaction.  \n- It should include a shortened address (e.g., 0xAb...1234), and token/project name  \n- Include the action (e.g., exploited, rug pulled, drained, suspicious tx)  \n- Add a known loss amount (e.g., ~$2.5M) or key behavior (e.g., flashloan, swap, drain)  \n- Must **end with ‚Äú[TEST]‚Äù**\n\n---\n\nüßæ Format your response exactly like this (plain text only and nothing else):\n\n[WatcherGuru Tweet]  \n[Tweet text]\n\n[DavePortnoy Tweet]  \n[Tweet text]\n\n[CrashiusClay Tweet]  \n[Tweet text]\n\n[Trump Tweet]  \n[Tweet text]\n\n[CryptoNews Tweet]  \n[Tweet text]\n\n[PeckShield Tweet]  \n[Tweet text]"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -2064,
        1756
      ],
      "id": "a54ea61c-1def-410a-85b2-3e7a3b92cb79",
      "name": "Analyst8"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -1992,
        1980
      ],
      "id": "60d86aef-73f5-4e8d-a0f7-c82bb9df7033",
      "name": "Google Gemini Chat Model5",
      "credentials": {
        "googlePalmApi": {
          "id": "M3UjyzgBESYrpQZW",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "cdb963bc-a9a1-41f7-b884-4734ab1d0624",
              "leftValue": "={{ $json.text }}",
              "rightValue": "Don't Trade",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -304,
        272
      ],
      "id": "54330d93-034a-455b-b10d-ccef2c3a0c7c",
      "name": "If6"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -816,
        664
      ],
      "id": "6992adac-e05f-4b0c-848a-920897cd0610",
      "name": "No Operation, do nothing13"
    },
    {
      "parameters": {
        "jsCode": "const allData = $input.all();\n\nconst tweets = allData\n\t.map(item => item.json)\n\t.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n\nif (!tweets.length) {\n\treturn [{ $node: false, reason: \"No tweets found\" }];\n}\n\nreturn tweets.map(tweet => ({\n\tid: tweet.id,\n\ttext: tweet.text || tweet.tweet,\n\tcreated_at: tweet.created_at,\n\tisNew: true\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -816,
        393.5
      ],
      "id": "d684533e-9dfa-4db8-b5b2-7f4068def7d9",
      "name": "Clean4"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -592,
        393.5
      ],
      "id": "1b10c298-54f7-4690-9bbe-8c2ea9344062",
      "name": "Loop Over Items7"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a crypto token signal filter. You only evaluate tweet below from @NeglectAlerts.  \nYour job: read the tweet and tell me ONLY if the token is a good trade.  \nIf the token does not meet the criteria, reply with \"Don't Trade\" and nothing else. \n\nTweet: {{ $('Clean4').item.json.text }}\n\nüöÄ A token is GOOD (Trade) if ALL are true:\n- Market Cap between $80k and $300k\n- Trading Volume greater than or equal to $200k\n- Top 10 wallets hold less than or equal to 25% of supply\n- Holders is greater than or equal to  250\n- Token graduation MUST be (or bonded) less than 60 minutes ago. (no 1hr and above)\n\n‚ö†Ô∏è If any condition is not met ‚Üí output \"Don't Trade\" and nothing else.\n\nOutput format (only when it is GOOD):\nüöÄ Trade ‚Üí ${token symbol}\nReason: {short reasoning using market cap, volume, wallet %, holders, graduation time}\nContract: {contract address}\nüìù Example\nTweet:\n\"Trending token: $HELPER. Market cap $97K. Volume $414K. Top 10 wallets 20.3%. 523 holders. Graduated 2 minutes ago.\"\n\nBot Output:\n\nüöÄ Trade ‚Üí $HELPER  \nReason: MC $97K in sweet spot, strong volume $414K, wallets only 20%, 523 holders, just graduated (2m). Early momentum looks strong.  \nContract: 4dEQZ8Zmr4BPQgfpBh66GDHCKeuN5yo5XfdJWqQkpump\nand nothing else\n\n\nTweet:\n\"Trending token: $CHUTE. Market cap $84K. Volume $299K. Top 10 wallets 32.5%. 254 holders. Graduated 1hr ago.\"\n\nBot Output:\n\"Don't Trade\" and nothing else\n\nNOTE: we are not trading tweets with hour ago graduation mentioned, only trade the ones with minutes ago graduation mentioned"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -368,
        464
      ],
      "id": "066763c3-9f39-4c5e-8ea8-bb27153998b9",
      "name": "Analyst7"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -296,
        688
      ],
      "id": "cbff0a7f-4866-455b-a320-e5294a2444f7",
      "name": "Google Gemini Chat Model7",
      "credentials": {
        "googlePalmApi": {
          "id": "M3UjyzgBESYrpQZW",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -16,
        224
      ],
      "id": "771c180a-44a0-4ae4-b411-e7b667dd3e38",
      "name": "No Operation, do nothing2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d0b4b2a3-fa1a-45ab-8a3f-02e3d14caf34",
              "leftValue": "={{ $json.author_id }}",
              "rightValue": "1860086931163320320",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1040,
        541.5
      ],
      "id": "be24517b-9a4b-4e40-a891-664a20e2f25a",
      "name": "Neglectalerts"
    },
    {
      "parameters": {
        "chatId": "6684941670",
        "text": "=üö® Market Alert from NeglectAlerts\n\n{{ $json.text }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -16,
        520
      ],
      "id": "a5ca1ce7-3b38-44a9-bdd6-0b908e095579",
      "name": "Send a text message",
      "webhookId": "01cf616d-a89c-48a9-a173-97bdeaa2577c",
      "credentials": {
        "telegramApi": {
          "id": "3si26q5LbQhkSZyl",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "cdb963bc-a9a1-41f7-b884-4734ab1d0624",
              "leftValue": "={{ $json.text }}",
              "rightValue": "Don't Trade",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -304,
        864
      ],
      "id": "9f060cbb-af30-4170-9c8b-56745e54f9f3",
      "name": "If"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -816,
        1256
      ],
      "id": "d3eea495-a358-4584-a06e-aba1a2422f47",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "jsCode": "const allData = $input.all();\n\nconst tweets = allData\n\t.map(item => item.json)\n\t.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n\nif (!tweets.length) {\n\treturn [{ $node: false, reason: \"No tweets found\" }];\n}\n\nreturn tweets.map(tweet => ({\n\tid: tweet.id,\n\ttext: tweet.text || tweet.tweet,\n\tcreated_at: tweet.created_at,\n\tisNew: true\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -816,
        985.5
      ],
      "id": "849ee134-5159-4487-bf41-0ec8911b8e67",
      "name": "Clean"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -592,
        985.5
      ],
      "id": "cd3deb7c-0501-4e74-99b5-cc9ad8139c5f",
      "name": "Loop Over Items8"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a crypto meme coin sniper filter. You only evaluate the tweet below. \n\nTweet: {{ $('Clean').item.json.text }}\n\nüöÄ Mark a tweet as GOOD (Trade) if:\n- It has a short, hype-driven message (e.g. \"This will go to 20M!\", \"Justice for Rasta!\", \"Moken for the win!\", \"Best coin so far!\")\n- Mentions a contract address (CA: ...)\n- Mentions a meme/narrative (justice, win, cause, rally, 10M, 20M, etc.)\n- Tweet tone = emotional, urgent, or extreme (caps, exclamation, community call)\n\n‚ö†Ô∏è output \"Don't Trade\" and nothing else if:\n- It looks like a neutral data post (just stats, no hype).\n- No contract address is provided.\n\nOutput format (ONLY when GOOD):\nüöÄ Trade ‚Üí ${token symbol or meme name if given}  \nReason: {short explanation of hype/tone + CA presence}  \nContract: {contract address}\n\nüìù Examples\nTweet:\n\"THIS WILL GO TO 20 MILLION CA: 34AeqX5MQGyrey2VnZdkeZCfM4qinp4F3X7pGxtipump\"\n\nBot Output:\nüöÄ Trade ‚Üí Unknown (Meme Play)  \nReason: Extreme hype claim (\"20M\"), all caps, clear CA provided. Classic meme pump pattern.  \nContract: 34AeqX5MQGyrey2VnZdkeZCfM4qinp4F3X7pGxtipump and nothing else\n\nTweet:\n\"RT @a1lon9: the return to memes will be glorious\"\n\nBot Output:\nDon't Trade (and nothing else)\n\n"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -368,
        1056
      ],
      "id": "268c7d92-cc04-41f0-a4bf-6b891ae98f90",
      "name": "Analyst"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -296,
        1280
      ],
      "id": "4721a04a-122e-44ca-8314-a21f32f53e36",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "M3UjyzgBESYrpQZW",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -16,
        712
      ],
      "id": "209b8d69-c790-4306-8de9-4949ad9ab9c2",
      "name": "No Operation, do nothing3"
    },
    {
      "parameters": {
        "chatId": "6684941670",
        "text": "=üö® Market Alert from SOLRewardsol\n\n {{ $json.text }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -16,
        1112
      ],
      "id": "8499a2a3-4427-481c-99d9-b139aefb7ab3",
      "name": "Send a text message1",
      "webhookId": "01cf616d-a89c-48a9-a173-97bdeaa2577c",
      "credentials": {
        "telegramApi": {
          "id": "3si26q5LbQhkSZyl",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d0b4b2a3-fa1a-45ab-8a3f-02e3d14caf34",
              "leftValue": "={{ $json.author_id }}",
              "rightValue": "1555887152474603522",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1040,
        1133.5
      ],
      "id": "9e0bf2db-993e-4aef-a8d4-345c9ca73fae",
      "name": "solrewards"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "cdb963bc-a9a1-41f7-b884-4734ab1d0624",
              "leftValue": "={{ $json.text }}",
              "rightValue": "Don't Trade",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -304,
        1456
      ],
      "id": "3941057b-f114-482a-8b52-311c56b55b13",
      "name": "If1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -816,
        1956
      ],
      "id": "a3097327-475b-42b3-91ef-2222cbee567c",
      "name": "No Operation, do nothing1"
    },
    {
      "parameters": {
        "jsCode": "const allData = $input.all();\n\nconst tweets = allData\n\t.map(item => item.json)\n\t.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n\nif (!tweets.length) {\n\treturn [{ $node: false, reason: \"No tweets found\" }];\n}\n\nreturn tweets.map(tweet => ({\n\tid: tweet.id,\n\ttext: tweet.text || tweet.tweet,\n\tcreated_at: tweet.created_at,\n\tisNew: true\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -816,
        1577.5
      ],
      "id": "ea231bad-b7a1-4f9d-aa0b-fe4d8b074955",
      "name": "Clean1"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -592,
        1577.5
      ],
      "id": "ff3d3b0d-2763-4fe3-9650-386b1b099ac0",
      "name": "Loop Over Items9"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a crypto token entry filter. You only evaluate the tweet below and detect if it is a fresh entry tweets  \n\nTweet: {{ $('Clean1').item.json.text }}\n\nüöÄ GOOD (Trade) if:\n- Tweet contains a contract address (CA: ‚Ä¶)\n- Mentions a token symbol (e.g., $AZY, $BANANA, $DATA)\n- Tweet style is an entry call (e.g., \"$TOKEN CA; ‚Ä¶\", \"Watch your entry on $TOKEN\", \"Best coin so far\")\n- No past performance claims (\"2X\", \"5X\", \"10X up\", \"X on my call\")\n\n‚ö†Ô∏è output \"Don't Trade\" and nothing else if:\n- Tweet only talks about performance or multipliers (\"X up\", \"X on my call\", \"early gems printing\")\n- No contract address present\n- Neutral stats/data only\n\nOutput format (ONLY when GOOD):\nüöÄ Trade ‚Üí ${token symbol}  \nReason: {short explanation, based on entry style and CA presence}  \nContract: {contract address}\nand nothing else\n\nüìù Examples\nTweet:\n‚Äú$AZY CA; 8cChvPc1kuUAHvTQKefZ7yqG3RK6wNFFQNMoGEjApump‚Äù\n\n‚úÖ Output:\nüöÄ Trade ‚Üí $AZY  \nReason: Fresh entry call, direct CA drop with no performance claims.  \nContract: 8cChvPc1kuUAHvTQKefZ7yqG3RK6wNFFQNMoGEjApump\n\n\nTweet:\n‚ÄúWatch your entry on $DATA Note; Gamble for now CA; 3ggUExByrtJjm8qoq7xeBS3s8Ewaq8o6xU36fyZqpump‚Äù\n\n‚úÖ Output:\nüöÄ Trade ‚Üí $DATA  \nReason: Entry-style tweet, mentions contract directly, guiding entry.  \nContract: 3ggUExByrtJjm8qoq7xeBS3s8Ewaq8o6xU36fyZqpump\n\n\nTweet:\n‚Äú11X up on $AZY CA; 8cChvPc1kuUAHvTQKefZ7yqG3RK6wNFFQNMoGEjApump‚Äù\n\n‚úÖ Output:\nDon't Trade (and nothing else)"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -368,
        1648
      ],
      "id": "187a03a7-2cd6-4a32-a9e1-758e28873791",
      "name": "Analyst1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -296,
        1872
      ],
      "id": "ddc39036-e1b7-428e-a997-5cf7982d7e28",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "M3UjyzgBESYrpQZW",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "6684941670",
        "text": "=üö® Market Alert from Alp_Gems\n\n {{ $json.text }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -16,
        1704
      ],
      "id": "db09a5e3-0c99-4887-a87f-97af3fe03a5a",
      "name": "Send a text message2",
      "webhookId": "01cf616d-a89c-48a9-a173-97bdeaa2577c",
      "credentials": {
        "telegramApi": {
          "id": "3si26q5LbQhkSZyl",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d0b4b2a3-fa1a-45ab-8a3f-02e3d14caf34",
              "leftValue": "={{ $json.author_id }}",
              "rightValue": "1791308379274493952",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1040,
        1725.5
      ],
      "id": "ec16f711-214c-4789-9ba2-79713f0a4f72",
      "name": "Alph_Gems"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -16,
        1304
      ],
      "id": "ac12c132-fbef-49b6-9337-a8a7241ebf06",
      "name": "No Operation, do nothing4"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "cdb963bc-a9a1-41f7-b884-4734ab1d0624",
              "leftValue": "={{ $json.text }}",
              "rightValue": "Don't Trade",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "65384a74-a3e3-4b4f-9b45-8c8aa6fb41cd",
              "leftValue": "={{ $json.text }}",
              "rightValue": "Okay, I understand. I will analyze the tweet and provide an output based on your criteria. Let's begin.",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -304,
        2048
      ],
      "id": "15479509-6ccd-4e72-82ee-fd9a0bc16555",
      "name": "If2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -816,
        2365.5
      ],
      "id": "24136f36-5017-4b7a-87c4-7e0ba1168c80",
      "name": "No Operation, do nothing5"
    },
    {
      "parameters": {
        "jsCode": "const allData = $input.all();\n\nconst tweets = allData\n\t.map(item => item.json)\n\t.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n\nif (!tweets.length) {\n\treturn [{ $node: false, reason: \"No tweets found\" }];\n}\n\nreturn tweets.map(tweet => ({\n\tid: tweet.id,\n\ttext: tweet.text || tweet.tweet,\n\tcreated_at: tweet.created_at,\n\tisNew: true\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -816,
        2173.5
      ],
      "id": "e27dc9dd-2dc7-452c-9475-b451745ee523",
      "name": "Clean2"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -592,
        2173.5
      ],
      "id": "ca6e4d3a-ed3f-4d74-9ebd-512e75925257",
      "name": "Loop Over Items10"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a crypto token filter for Solana memecoins. You only evaluate the tweet below and detect if it is a fresh entry calls with contract addresses.\n\nTweet: {{ $('Clean2').item.json.text }}\n\nüöÄ Mark as GOOD (trade) if:\n- The tweet contains a contract address (CA> ‚Ä¶ or CA; ‚Ä¶).\n- The style is an entry call (e.g., \"CA>\", \"$TOKEN CA;\", \"Entry CA>\").\n- It does NOT include past performance claims (e.g., \"2x\", \"5x\", \"104x\", \"profit made\", \"X up\").\n- It does NOT include phrases like \"my call\", \"printed\", \"profit\", \"hit X\".\n\n‚ö†Ô∏è output \"Don't Trade\" and nothing else if:\n- Tweet is only bragging about multipliers (x2, x10, 65x, etc).\n- Tweet mentions ‚Äúprofit made‚Äù, ‚Äúup on my call‚Äù, ‚Äúprinted‚Äù, or similar performance recap.\n- No contract address is present.\n\nOutput (ONLY for GOOD tweets):\n\nüöÄ Trade ‚Üí ${token symbol if present, else \"Unknown\"}  \nReason: Fresh CA entry drop, no performance claims.  \nContract: ${CA}\n\nand nothing else\n\n\n\nüìù Example Tweet: \"Ca<> G9Txq9wogz3U74TjgpCiPzQzRWVYABNB4rvydjHppump\"\n\nOutput: \nüöÄ Trade ‚Üí Unknown  \nReason: Pure CA drop with no performance claims.  \nContract: G9Txq9wogz3U74TjgpCiPzQzRWVYABNB4rvydjHppump\n\n\nüìù Example Tweet: \"104x up on $rarecoin\"\"\nOutput: \"Don't Trade\" (and nothing else)\n"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -368,
        2344
      ],
      "id": "6fbc4758-9850-42e4-8415-fe35833057b2",
      "name": "Analyst2"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -296,
        2568
      ],
      "id": "61c85ebf-ba01-4103-898a-710222775296",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "M3UjyzgBESYrpQZW",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "6684941670",
        "text": "=üö® Market Alert from Stevie_Gems\n\n{{ $json.text }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -16,
        2192
      ],
      "id": "83021ab3-b69b-4de2-ae12-5c364a8a58b5",
      "name": "Send a text message3",
      "webhookId": "01cf616d-a89c-48a9-a173-97bdeaa2577c",
      "credentials": {
        "telegramApi": {
          "id": "3si26q5LbQhkSZyl",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d0b4b2a3-fa1a-45ab-8a3f-02e3d14caf34",
              "leftValue": "={{ $json.author_id }}",
              "rightValue": "1819137392818917376",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1040,
        2317.5
      ],
      "id": "ec7d1e78-d5b2-4a68-bbea-51eaa55392aa",
      "name": "Stevie_gems"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -16,
        1896
      ],
      "id": "8aceb35b-4fb3-4f91-a58a-2abc581db249",
      "name": "No Operation, do nothing6"
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "tweets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tweets": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Remove Duplicates1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Duplicates1": {
      "main": [
        [
          {
            "node": "Neglectalerts",
            "type": "main",
            "index": 0
          },
          {
            "node": "solrewards",
            "type": "main",
            "index": 0
          },
          {
            "node": "Alph_Gems",
            "type": "main",
            "index": 0
          },
          {
            "node": "Stevie_gems",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger2": {
      "main": [
        [
          {
            "node": "Analyst8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyst8": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "Analyst8",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "If6": {
      "main": [
        [
          {
            "node": "No Operation, do nothing2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean4": {
      "main": [
        [
          {
            "node": "Loop Over Items7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items7": {
      "main": [
        [
          {
            "node": "If6",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Analyst7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyst7": {
      "main": [
        [
          {
            "node": "Loop Over Items7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model7": {
      "ai_languageModel": [
        [
          {
            "node": "Analyst7",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Neglectalerts": {
      "main": [
        [
          {
            "node": "Clean4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "No Operation, do nothing3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a text message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean": {
      "main": [
        [
          {
            "node": "Loop Over Items8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items8": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Analyst",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyst": {
      "main": [
        [
          {
            "node": "Loop Over Items8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Analyst",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "solrewards": {
      "main": [
        [
          {
            "node": "Clean",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "No Operation, do nothing4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a text message2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean1": {
      "main": [
        [
          {
            "node": "Loop Over Items9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items9": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Analyst1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyst1": {
      "main": [
        [
          {
            "node": "Loop Over Items9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Analyst1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Alph_Gems": {
      "main": [
        [
          {
            "node": "Clean1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "No Operation, do nothing6",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a text message3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clean2": {
      "main": [
        [
          {
            "node": "Loop Over Items10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items10": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Analyst2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyst2": {
      "main": [
        [
          {
            "node": "Loop Over Items10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Analyst2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Stevie_gems": {
      "main": [
        [
          {
            "node": "Clean2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8af78cfe-8c81-409d-bf91-e3da58faf858",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8edf5a38f6702aee5fa471d0f09436f8bf6756ec4924fabff99cca9eb6505638"
  },
  "id": "8FPwSsZKti0UuPU4",
  "tags": []
}